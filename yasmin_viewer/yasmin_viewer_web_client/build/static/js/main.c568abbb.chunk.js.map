{"version":3,"sources":["components/FSM.js","components/Viewer.js","App.js","reportWebVitals.js","index.js"],"names":["FSM","props","fsm_data","nodes","edges","fsms_stack","fsm_outcomes_stack","state_amount_stack","current_state_path","fsm_name","current_state","fsm_structure","states","Array","from","push","length","aux_outcomes","outcomes","final_outcomes","key","outcome","data","id","label","type","width","height","state","pop","parent","state_name","is_fsm","source","transitions","hasOwnProperty","target","includes","cytoscape","use","klay","graph","this","prepare_graph","style","display","justifyContent","alignItems","Grid","container","spacing","item","xs","Typography","variant","component","gutterBottom","align","Box","border","elements","CytoscapeComponent","normalizeElements","stylesheet","selector","borderColor","borderWidth","textValign","textHalign","backgroundColor","targetArrowShape","curveStyle","layout","name","direction","nodePlacement","nodeLayering","fixedAlignment","layoutHierarchy","mergeHierarchyCrossingEdges","zoomingEnabled","boxSelectionEnabled","autoungrabify","panningEnabled","userZoomingEnabled","userPanningEnabled","React","Component","Viewer","fsm_list","current_fsm","fetch","then","res","json","aux_fsm_list","value","setState","interval","setInterval","get_fsms","get_fsm","clearInterval","Autocomplete","disableClearable","options","getOptionLabel","option","getOptionSelected","defaultValue","onChange","event","renderInput","params","TextField","map","fsm","App","marginTop","marginLeft","marginRight","marginBottom","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c568abbb.chunk.js","sourcesContent":["import React from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport dagre from 'cytoscape-dagre';\nimport klay from 'cytoscape-klay';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\n\nclass FSM extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    prepare_graph(fsm_data) {\n        var nodes = [];\n        var edges = [];\n\n        var fsms_stack = [];\n        var fsm_outcomes_stack = [];\n        var state_amount_stack = [];\n        var current_state_path = fsm_data.fsm_name + fsm_data.current_state;\n\n        var fsm_structure = fsm_data.fsm_structure;\n        var states = Array.from(fsm_structure.states);\n\n        fsms_stack.push(fsm_data.fsm_name);\n        state_amount_stack.push(states.length);\n\n        var aux_outcomes = []\n        var outcomes = fsm_structure.final_outcomes;\n\n        for (var key in outcomes) {\n\n            var outcome = outcomes[key];\n\n            aux_outcomes.push(outcome);\n\n            nodes.push({\n                data: {\n                    id: fsms_stack[fsms_stack.length - 1] + outcome,\n                    label: outcome,\n                    type: \"outcome\",\n                    width: outcome.length * 12,\n                    height: outcome.length * 12 / 2\n                }\n            })\n        }\n\n        fsm_outcomes_stack.push(aux_outcomes);\n\n        while (states.length > 0) {\n            var state = states.pop();\n            var parent = '';\n            var type = \"node\";\n            var height = 50;\n            var width = 100;\n\n\n            //// NODE ////\n            if (fsm_data.fsm_name != fsms_stack[fsms_stack.length - 1]) {\n                parent = fsms_stack[fsms_stack.length - 1];\n            }\n\n            if (current_state_path == fsms_stack[fsms_stack.length - 1] + state.state_name) {\n                if (!state.is_fsm) {\n                    type = \"current_state\";\n                } else {\n                    current_state_path = current_state_path + state.current_state\n                    type = \"current_fsm\";\n                }\n            } else {\n                if (state.is_fsm) {\n                    type = \"fsm\";\n                }\n            }\n\n            if (height < state.state_name.length * 6) {\n                height = state.state_name.length * 6;\n            }\n\n            if (width < state.state_name.length * 12) {\n                width = state.state_name.length * 12;\n            }\n\n            nodes.push({\n                data: {\n                    id: fsms_stack[fsms_stack.length - 1] + state.state_name,\n                    parent: parent,\n                    label: state.state_name,\n                    type: type,\n                    width: width,\n                    height: height\n                }\n            })\n\n            state_amount_stack[state_amount_stack.length - 1] -= 1;\n\n\n            //// TRANSITIONS ////\n            for (var key in state.outcomes) {\n                var outcome = state.outcomes[key];\n                var source = fsms_stack[fsms_stack.length - 1] + state.state_name;\n\n                if (state.is_fsm) {\n                    source = fsms_stack[fsms_stack.length - 1] + state.state_name + outcome;\n                }\n\n                if (state.transitions.hasOwnProperty(outcome)) {\n                    edges.push(\n                        {\n                            data: {\n                                id: fsms_stack[fsms_stack.length - 1] + state.state_name + outcome + state.transitions[outcome],\n                                source: source,\n                                target: fsms_stack[fsms_stack.length - 1] + state.transitions[outcome],\n                                label: outcome\n                            }\n                        }\n                    )\n                } else {\n\n                    if (fsm_outcomes_stack[fsm_outcomes_stack.length - 1].includes(outcome)) {\n                        edges.push(\n                            {\n                                data: {\n                                    id: fsms_stack[fsms_stack.length - 1] + state.state_name + outcome + outcome,\n                                    source: source,\n                                    target: fsms_stack[fsms_stack.length - 1] + outcome,\n                                    label: outcome\n                                }\n                            }\n                        )\n                    }\n                }\n            }\n\n\n            //// STATE IS FSM ////\n            if (state.is_fsm) {\n                aux_outcomes = [];\n                for (var key in state.outcomes) {\n                    var outcome = state.outcomes[key];\n                    aux_outcomes.push(outcome);\n\n                    if (state.is_fsm) {\n                        nodes.push({\n                            data: {\n                                id: fsms_stack[fsms_stack.length - 1] + state.state_name + outcome,\n                                label: outcome,\n                                type: \"outcome\",\n                                parent: fsms_stack[fsms_stack.length - 1] + state.state_name,\n                                width: outcome.length * 12,\n                                height: outcome.length * 12 / 2\n                            }\n                        })\n                    }\n                }\n\n                fsms_stack.push(fsms_stack[fsms_stack.length - 1] + state.state_name);\n                fsm_outcomes_stack.push(aux_outcomes);\n                state_amount_stack.push(state.states.length)\n\n                for (var key in state.states) {\n                    states.push(state.states[key]);\n                }\n            }\n\n            //// CLEANING STACKS ////\n            while (state_amount_stack[state_amount_stack.length - 1] == 0) {\n                state_amount_stack.pop()\n                fsms_stack.pop()\n                fsm_outcomes_stack.pop()\n            }\n\n        }\n\n        return [nodes, edges];\n    }\n\n    render() {\n\n        /*const layout = {\n            name: 'dagre',\n            animate: true,\n            rankDir: 'TB',\n            ranker: 'longest-path' //tight-tree\n        }*/\n        //const layout = { name: 'breadthfirst' };\n        //const layout = { name: 'circle' }\n        const layout = {\n            name: 'klay', klay: {\n                spacing: 40,\n                direction: 'DOWN',\n                nodePlacement: 'BRANDES_KOEPF',\n                nodeLayering: 'INTERACTIVE',\n                fixedAlignment: 'BALANCED',\n                layoutHierarchy: true,\n                mergeHierarchyCrossingEdges: false\n            }\n        }\n\n        cytoscape.use(klay);\n        //cytoscape.use(cola);\n        //cytoscape.use(dagre);\n\n\n\n        var nodes;\n        var edges;\n        var graph = this.prepare_graph(this.props.fsm_data);\n        nodes = graph[0];\n        edges = graph[1];\n\n        return (\n            <div style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n            }} >\n\n                <Grid container spacing={1}>\n                    <Grid item xs={12}>\n\n                        <Typography variant=\"h4\" component=\"h4\" gutterBottom align=\"center\">\n                            {this.props.fsm_data.fsm_name}\n                        </Typography>\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <Box display=\"flex\" border={1} justifyContent=\"center\" style={{ width: '100%', height: '100%' }}>\n                            <CytoscapeComponent\n                                elements={\n                                    CytoscapeComponent.normalizeElements({\n                                        nodes: nodes,\n                                        edges: edges\n                                    })\n                                }\n\n                                stylesheet={[\n                                    {\n                                        selector: \"node\",\n                                        style: {\n                                            label: \"data(label)\",\n                                            borderColor: \"black\",\n                                            borderWidth: 2,\n                                            textValign: \"center\",\n                                            textHalign: \"center\",\n                                            width: \"data(width)\",\n                                            height: \"data(height)\"\n                                        }\n                                    },\n                                    {\n                                        selector: \"node[type = 'fsm']\",\n                                        style: {\n                                            textValign: \"top\",\n                                            textHalign: \"center\"\n                                        }\n                                    },\n                                    {\n                                        selector: \"node[type = 'outcome']\",\n                                        style: {\n                                            backgroundColor: \"red\",\n                                            //shape: \"diamond\",\n                                        }\n                                    },\n                                    {\n                                        selector: \"node[type = 'current_state']\",\n                                        style: {\n                                            backgroundColor: \"green\",\n                                        }\n                                    },\n                                    {\n                                        selector: \"node[type = 'current_fsm']\",\n                                        style: {\n                                            borderColor: 'blue',\n                                            textValign: \"top\",\n                                            textHalign: \"center\"\n                                        }\n                                    },\n                                    {\n                                        selector: 'edge',\n                                        style: {\n                                            label: \"data(label)\",\n                                            targetArrowShape: 'triangle',\n                                            curveStyle: \"bezier\", //unbundled\n                                            //\"text-rotation\": \"autorotate\",\n                                        }\n                                    }\n                                ]}\n\n                                layout={layout}\n                                style={{ width: '100%', height: '75vh' }}\n                                zoomingEnabled={true}\n                                boxSelectionEnabled={false}\n                                autoungrabify={true}\n                                panningEnabled={true}\n                                userZoomingEnabled={false}\n                                userPanningEnabled={false} />\n                        </Box >\n                    </Grid>\n                </Grid>\n            </div >\n        )\n    }\n}\n\nexport default FSM;\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport FSM from \"./FSM\"\nimport Grid from '@material-ui/core/Grid';\n\nclass Viewer extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            fsm_list: [],\n            current_fsm: { fsm_name: \"ALL\" }\n        };\n    }\n\n    get_fsms() {\n        fetch('/get_fsms').then(res => res.json()).then(data => {\n            var aux_fsm_list = [{ fsm_name: \"ALL\" }]\n\n            for (var key in data) {\n                var value = data[key];\n                aux_fsm_list.push(value);\n            }\n\n            this.setState({ fsm_list: aux_fsm_list })\n\n\n        });\n    }\n\n    get_fsm() {\n        fetch('/get_fsm/' + this.state.current_fsm.fsm_name).then(res => res.json()).then(data => {\n            this.setState({ current_fsm: data })\n        });\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            if (this.state.current_fsm.fsm_name === \"ALL\") {\n                this.get_fsms()\n            } else {\n                this.get_fsm()\n            }\n        }, 250);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n\n    render() {\n\n\n\n\n        return (< div style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n        }}>\n\n\n            <Grid container spacing={3}>\n                <Grid item xs={12}>\n                    <div style={{\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                    }}>\n                        <Autocomplete\n                            id=\"combo-box\"\n                            disableClearable=\"true\"\n                            options={this.state.fsm_list}\n                            getOptionLabel={(option) => option.fsm_name}\n                            getOptionSelected={(option, value) => option.fsm_name === value.fsm_name}\n                            defaultValue={{ fsm_name: \"ALL\" }}\n                            onChange={(event, value) => { this.setState({ current_fsm: value }); }}\n                            style={{ width: 300 }}\n                            renderInput={(params) => <TextField {...params} label=\"FSM\" variant=\"outlined\" />}\n                        />\n                    </div>\n                </Grid>\n\n                {this.state.current_fsm.fsm_name === \"ALL\" ? (\n\n                    this.state.fsm_list.map((fsm) => {\n                        if (fsm.fsm_name !== \"ALL\") {\n                            return (\n                                < Grid item xs={6} key={fsm.fsm_name} >\n                                    < FSM fsm_data={fsm} />\n                                </Grid>)\n                        }\n                    }\n                    )\n\n                ) : (\n                        < Grid item xs={12} >\n                            < FSM fsm_data={this.state.current_fsm} />\n                        </Grid>\n                    )}\n            </Grid>\n        </div >)\n    }\n}\n\nexport default Viewer;\n","import React, { Fragment } from 'react';\nimport './App.css';\nimport Viewer from './components/Viewer'\n\nfunction App() {\n  return (\n    <Fragment>\n      <div style={{ marginTop: \"20px\", marginLeft: \"20px\", marginRight: \"20px\", marginBottom: \"20px\" }}>\n        <Viewer />\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}